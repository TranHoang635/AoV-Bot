const { MessageEmbed } = require('discord.js');
const { User } = require('../../utils/schema');
const emojiVang = '1134532609993621524';

const userSendLimits = new Map();

module.exports = {
    name: 'give',
    description: 'Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c',
    options: [
        {
            name: 'vang',
            description: 'Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c',
            type: 1,
            options: [
                {
                    name: 'user',
                    description: 'Ng∆∞·ªùi b·∫°n mu·ªën chuy·ªÉn',
                    type: 'USER',
                    required: true,
                },
                {
                    name: 'vang',
                    description: 'vang',
                    type: 'INTEGER',
                    required: true,
                    constraints: {
                        min: 1,
                        max: 800, // Ch·ªâ cho ph√©p t·ªëi ƒëa 800 vang m·ªói l·∫ßn chuy·ªÉn
                        integer: true
                    }
                }
            ]
        }
    ],
    run: async (client, interaction) => {
        const user = interaction.options.getUser('user');
        const vang = interaction.options.getInteger('vang');
        const senderData = await User.findOne({ id: interaction.user.id }) || new User({ id: interaction.user.id });
        const receiverData = await User.findOne({ id: user.id }) || new User({ id: user.id });

        if (vang < 0) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`\`\`\`S·ªë ti·ªÅn chuy·ªÉn kh√¥ng h·ª£p l·ªá!!\`\`\``)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ g·ª≠i/nh·∫≠n 2 l·∫ßn trong c√πng m·ªôt ng√†y
        const today = new Date().toDateString();
        const userSendInfo = userSendLimits.get(interaction.user.id) || { count: 0, lastSent: '', totalSentToday: 0 };

        if (userSendInfo.lastSent === today && userSendInfo.count >= 2) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`\`\`\`B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n 2 l·∫ßn g·ª≠i trong ng√†y\`\`\``)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        if (userSendInfo.lastSent === today && userSendInfo.totalSentToday + vang > 800) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`**T·ªïng s·ªë <:emoji:${emojiVang}> g·ª≠i trong ng√†y kh√¥ng th·ªÉ v∆∞·ª£t qu√° 800`)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        // Ki·ªÉm tra s·ªë vang ng∆∞·ªùi g·ª≠i c√≤n ƒë·ªß kh√¥ng
        if (senderData.vang < vang) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`**<:emoji:${emojiVang}> kh√¥ng ƒë·ªß ${vang} ƒë·ªÉ chuy·ªÉn**`)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        // Ki·ªÉm tra s·ªë vang ng∆∞·ªùi nh·∫≠n c√≤n ƒë·ªß kh√¥ng
        if (receiverData.vang + vang > 800) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`**Ng∆∞·ªùi nh·∫≠n ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n 800 <:emoji:${emojiVang}>**`)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        // Ti·∫øn h√†nh giao d·ªãch chuy·ªÉn vang
        senderData.vang -= vang;
        receiverData.vang += vang;

        try {
            await senderData.save();
            await receiverData.save();
        } catch (error) {
            const senderembed = new MessageEmbed({ color: 'RED' })
                .setDescription(`\`\`\`ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán giao d·ªãch\`\`\``)
            return interaction.reply({ embeds: [senderembed], ephemeral: true });
        }

        // N·∫øu giao d·ªãch th√†nh c√¥ng, c·∫≠p nh·∫≠t th√¥ng tin s·ªë l·∫ßn g·ª≠i v√† th·ªùi gian g·ª≠i g·∫ßn nh·∫•t c·ªßa ng∆∞·ªùi d√πng
        if (userSendInfo.lastSent !== today) {
            userSendInfo.lastSent = today;
            userSendInfo.count = 1;
        } else {
            userSendInfo.count++;
        }
        userSendInfo.totalSentToday += vang;
        userSendLimits.set(interaction.user.id, userSendInfo);

        const embed = new MessageEmbed({ color: 'WHITE' })
            .setDescription(`**üí≥ | Chuy·ªÉn th√†nh c√¥ng __${vang}__ <:emoji:${emojiVang}> cho ${user.username}**`)
        return interaction.reply({ embeds: [embed] });
    }
};
